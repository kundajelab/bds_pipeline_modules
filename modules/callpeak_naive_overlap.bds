#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "module_template.bds"


help == callpeak naive overlap settings
nonamecheck	:= false        help bedtools intersect -nonamecheck (bedtools>=2.24.0, use this if you get bedtools intersect naming convenction warnings/errors).

grp_color_naive_overlap := "skyblue"


init_callpeak_naive_overlap()


void init_callpeak_naive_overlap() {

        nonamecheck	= get_conf_val_bool( nonamecheck, ["nonamecheck"] )

        print("\n\n== callpeak naiver overlap settings\n")
        print( "Bedtools intersect -nonamecheck\t: $nonamecheck\n")
}

string naive_overlap_peak( string filetype, string peak_pooled, string peak_rep1, string peak_rep2, \
			    string o_dir, string group ) {

	prefix 	:= replace_dir( rm_ext( peak_pooled, \
				["regionPeak","regionpeak","narrowPeak","narrowpeak",\
				 "broadPeak","broadpeak","gappedPeak","gappedpeak",filetype] ), o_dir )

	peak_PooledInRep1AndRep2 	:= "$prefix.PooledInRep1AndRep2.$filetype.gz"
	peak_final 			:= "$prefix.naive_overlap.$filetype.gz"
	filt_peak_final 		:= "$prefix.naive_overlap.filt.$filetype.gz"

	awk_param := _get_awk_param( filetype ) 
	cut_param := _get_cut_param( filetype )
	nonamecheck_param := nonamecheck ? "-nonamecheck" : ""

	string cmd1
	if ( path_exists( blacklist ) ) {
		cmd1 = "bedtools intersect -v -a <(zcat -f $peak_final) -b <(zcat -f $blacklist) "+\
			" | grep -P 'chr[\\dXY]+[ \\t]'"+\
			" | awk 'BEGIN{OFS=\"\\t\"} {if ($5>1000) $5=1000; print $0}'"+\
			" | gzip -nc > $filt_peak_final"
	}
	else {
		cmd1 = "echo"
	}

	in 	:= [ peak_pooled, peak_rep1, peak_rep2 ]
	out 	:= path_exists(blacklist) ? filt_peak_final : peak_final
	
	taskName:= "naive_overlap " + group
	timeout := 3600 // to get queued fast

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		//# Find pooled peaks that overlap Rep1 and Rep2 where overlap is defined as the fractional overlap wrt any one of the overlapping peak pairs  >= 0.5
		sys intersectBed $nonamecheck_param -wo -a <(zcat -f $peak_pooled) -b <(zcat -f $peak_rep1) | \
			awk 'BEGIN{FS="\t";OFS="\t"} $awk_param' | cut -f $cut_param | sort | uniq | \
			intersectBed $nonamecheck_param -wo -a stdin -b <(zcat -f $peak_rep2) | \
			awk 'BEGIN{FS="\t";OFS="\t"} $awk_param' | cut -f $cut_param | sort | uniq | gzip -nc > $peak_PooledInRep1AndRep2

		//# Combine peak lists
		sys zcat $peak_PooledInRep1AndRep2 | sort | uniq | gzip -nc > $peak_final

		sys $cmd1

		sys rm -f $peak_PooledInRep1AndRep2

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group, "NAIVE\\nOVERLAP\\n" + _get_short_filetype(filetype), grp_color_naive_overlap )
			   
	return out
}

// peaks = [peak_rep1, peak_rep2, ...]
string naive_overlap_peak( string filetype, string peak_pooled, string[] peaks, \
			    string peak_ppr1, string peak_ppr2, string o_dir, string group ) {

	prefix 	:= replace_dir( rm_ext( peak_pooled, \
				["regionPeak","regionpeak","narrowPeak","narrowpeak",\
				 "broadPeak","broadpeak","gappedPeak","gappedpeak",filetype] ), o_dir )

	peak_PooledInReps 		:= "$prefix.PooledInReps.$filetype.gz"
	peak_PooledInPsRep1AndPsRep2 	:= "$prefix.PooledInPsRep1AndPsRep2.$filetype.gz"
	peak_final 			:= "$prefix.naive_overlap.$filetype.gz"
	filt_peak_final 		:= "$prefix.naive_overlap.filt.$filetype.gz"

	awk_param := _get_awk_param( filetype ) 
	cut_param := _get_cut_param( filetype )
	nonamecheck_param := nonamecheck ? "-nonamecheck" : ""

	string command
	for (int i=0;i<peaks.size();i++) {
		if ( i == 0 ) {
			command += "intersectBed $nonamecheck_param -wo -a <(zcat -f $peak_pooled) -b <(zcat -f " + peaks[i] + ") | awk 'BEGIN{FS=\"\\t\";OFS=\"\\t\"} $awk_param' | cut -f $cut_param | sort | uniq | "
		}
		else {
			command += "intersectBed $nonamecheck_param -wo -a stdin -b <(zcat -f " + peaks[i] + ") | awk 'BEGIN{FS=\"\\t\";OFS=\"\\t\"} $awk_param' | cut -f $cut_param | sort | uniq | "
		}		
	}
	command += "gzip -nc > $peak_PooledInReps"

	string command2
	if ( peak_ppr1 != "" )  {
		command2 = "intersectBed $nonamecheck_param -wo -a <(zcat -f $peak_pooled) -b <(zcat -f $peak_ppr1) | awk 'BEGIN{FS=\"\\t\";OFS=\"\\t\"} $awk_param' | cut -f $cut_param | sort | uniq | " + \
		 	   "intersectBed $nonamecheck_param -wo -a stdin -b <(zcat -f $peak_ppr2) |    awk 'BEGIN{FS=\"\\t\";OFS=\"\\t\"} $awk_param' | cut -f $cut_param | sort | uniq | " + \
			   "gzip -nc > $peak_PooledInPsRep1AndPsRep2"
	}
	else {
		command2 = "echo"
		peak_PooledInPsRep1AndPsRep2 = ""
	}

	string command3
	if ( path_exists( blacklist ) ) {
		command3 = "bedtools intersect -v -a <(zcat -f $peak_final) -b <(zcat -f $blacklist) "+\
			" | grep -P 'chr[\\dXY]+[ \\t]'"+\
			" | awk 'BEGIN{OFS=\"\\t\"} {if ($5>1000) $5=1000; print $0}'"+\
			" | gzip -nc > $filt_peak_final"
	}
	else {
		command3 = "echo"
	}

	in 	:= [ peak_pooled ] + peaks + [peak_ppr1, peak_ppr2]
	out 	:= path_exists(blacklist) ? filt_peak_final : peak_final

	taskName:= "naive_overlap " + group

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		//# Find pooled peaks that overlap Rep1 and Rep2 where overlap is defined as the fractional overlap wrt any one of the overlapping peak pairs  >= 0.5
		sys $command

		//# Find pooled peaks that overlap PseudoRep1 and PseudoRep2 where overlap is defined as the fractional overlap wrt any one of the overlapping peak pairs  >= 0.5
		sys $command2

		//# Combine peak lists
		sys zcat $peak_PooledInReps $peak_PooledInPsRep1AndPsRep2 | sort | uniq | gzip -nc > $peak_final

		sys $command3

		sys rm -f $peak_PooledInReps $peak_PooledInPsRep1AndPsRep2

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group, "NAIVE\\nOVERLAP\\n" + _get_short_filetype(filetype), grp_color_naive_overlap )
	
	return out
}

string _get_awk_param( string filetype ) {

	if ( filetype.toLower() == "narrowpeak" || filetype.toLower() == "regionpeak" ) {

		return "{s1=$3-$2; s2=$13-$12; if (($21/s1 >= 0.5) || ($21/s2 >= 0.5)) {print $0}}"
	}
	else if ( filetype.toLower() == "broadpeak") { 

		return "{s1=$3-$2; s2=$12-$11; if (($19/s1 >= 0.5) || ($19/s2 >= 0.5)) {print $0}}"
	}
	else if ( filetype.toLower() == "gappedpeak") { 

		return "{s1=$3-$2; s2=$18-$17; if (($31/s1 >= 0.5) || ($31/s2 >= 0.5)) {print $0}}"
	}
	else {
		error("Unsupport peak file type! ($filetype)\n")
	}
}

string _get_cut_param( string filetype ) {

	if ( filetype.toLower() == "narrowpeak" || filetype.toLower() == "regionpeak" ) {

		return "1-10"
	}
	else if ( filetype.toLower() == "broadpeak") { 

		return "1-9"
	}
	else if ( filetype.toLower() == "gappedpeak") { 

		return "1-15"
	}
	else {
		error("Unsupport peak file type! ($filetype)\n")
	}
}

string _get_short_filetype( string filetype ) {

	if ( filetype.toLower() == "narrowpeak" ) {

		return "n. peak"
	}
	else if ( filetype.toLower() == "regionpeak" ) {

		return "r. peak"
	}
	else if ( filetype.toLower() == "broadpeak") { 

		return "b. peak"
	}
	else if ( filetype.toLower() == "gappedpeak") { 

		return "g. peak"
	}
	else {
		error("Unsupport peak file type! ($filetype)\n")
	}	
}
