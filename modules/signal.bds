#!/usr/bin/env bds
#vim: syntax=java

include "species.bds"
include "module_template.bds"

// removed --missingDataAsZero false -f 150
help == signal track generation settings (requirements: -umap -chrsz -seq)
seq 		:= ""		help Reference genome sequence directory path (where chr*.fa exist).
umap 		:= "" 		help Unique mappability tracks directory path (https://sites.google.com/site/anshulkundaje/projects/mappability).
param_bam_cvrg 	:= "--normalizeTo1x 2451960000 --centerReads -bs 10"	help Parameters for deepTools bigwig generation from filt_bam (default: "--normalizeTo1x 2451960000 --missingDataAsZero no --centerReads -f 150 -bs 10").
wt_bam_cvrg	:= "23h"	help Walltime for bamCoverage (deepTools) (default: 23h, 23:00:00).
mem_bam_cvrg	:= "16G" 	help Max. memory for bamCoverage (deepTools) (default: 16G).


grp_color_sigtrk 	:= "yellow"


init_signal()


void init_signal() {

	seq 		= get_conf_val( seq, 		["seq"])
	umap		= get_conf_val( umap, 		["umap"] )
	param_bam_cvrg	= get_conf_val( param_bam_cvrg, ["param_bam_cvrg"] )
	wt_bam_cvrg 	= get_conf_val( wt_bam_cvrg, 	["wt_bam_cvrg"] )
	mem_bam_cvrg 	= get_conf_val( mem_bam_cvrg, 	["mem_bam_cvrg"] )

	print("\n\n== signal track generation settings\n")
	print( "Ref. genome seq. dir.\t\t: $seq\n" )
	print( "Umap dir.\t\t\t: $umap\n" )
	print( "Param. for bamCoverage (deeptools)\t: $param_bam_cvrg\n")
	print( "Walltime (bam_cvrg)\t\t\t: $wt_bam_cvrg\n")
	print( "Max. memory (bam_cvrg)\t\t\t: $mem_bam_cvrg\n")
}

void chk_signal_aln2rawsig() {

	if ( !path_exists( "$umap/chr1.uint8.unique" ) ) error("Unique mappability (-umap) directory doesn't exists! (file: $umap/chr1.uint8.unique)\n")
	if ( !path_exists( chrsz ) ) error("Chromosome size file (-chrsz) is missing or doesn't exists! (file: $chrsz)")
	if ( !path_exists( "$seq/chr1.fa") ) error("\nReference genome sequence directory doesn't exists! (file: $seq/chr1.fa)\n")
}

string tag_to_bw( string tag, string fraglen, string o_dir, string group ) {
	
	prefix 	:= replace_dir( rm_ext( tag, ["tagAlign","tag","bed"] ), o_dir )
	bigwig 	:= "$prefix.bigwig"

	in 	:= [tag]
	out 	:= bigwig

	if ( out <- in ) { // if bigwig is newer than tag

		bedgraph := tag_to_bdg( tag, fraglen, o_dir, group )
		wait

		bigwig  = bdg_to_bw( bedgraph, o_dir, group )
		wait

		bedgraph.rm()
	}

	add_task_to_graph( in, out, group, "align2rawsignal", grp_color_sigtrk )

	return out
}

string tag_to_bdg( string tag, string fraglen, string o_dir, string group ) {

	prefix 		:= replace_dir( rm_ext( tag, ["tag", "tagAlign", "bed"] ), o_dir )
	bedgraph 	:= "$prefix.bedgraph"
	
	in 	:= [ tag ]
	out 	:= bedgraph

	taskName:= "tag to bdg a2rs "+group

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		sys align2rawsignal -i=$tag -o=$bedgraph -s=$seq -u=$umap -of=bg -l=$fraglen -mm=4

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

string bdg_to_bw( string bedgraph, string o_dir, string group ) {

	prefix 		:= replace_dir( rm_ext( bedgraph, ["bed", "bedgraph", "bg"] ), o_dir )
	bedgraph 	:= "$prefix.bedgraph"
	sorted_bg 	:= "$prefix.srt.bedgraph"
	bigwig 		:= "$prefix.bigwig"
	
	in 	:= [ bedgraph ]
	out 	:= bigwig

	taskName:= "bdg to bw "+group

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init
		
		sys sort -k1,1 -k2,2n $bedgraph > $sorted_bg

		sys bedGraphToBigWig $sorted_bg $chrsz $bigwig
		sys rm -f $sorted_bg

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

string tag_to_wig( string tag, string fraglen, string o_dir, string group ) {

	prefix 	:= replace_dir( rm_ext( tag, ["tag", "tagAlign", "bed"] ), o_dir )
	wig 	:= "$prefix.wig"
	
	in 	:= [ tag ]
	out 	:= wig

	taskName:= "tag to wig a2rs "+group

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		sys align2rawsignal -i=$tag -o=$wig -s=$seq -u=$umap -of=wig -l=$fraglen -mm=4

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group )

	return out
}

string bam_to_bw( string filt_bam, string o_dir, string group, int nth_bam_cvrg ) { // deeptools

	prefix 	:= replace_dir( rm_ext( filt_bam, ["bam"] ), o_dir )
	bigwig 	:= "$prefix.bam2bw.bigwig"
	
	in 	:= [ filt_bam ]
	out 	:= bigwig

	taskName:= "bam cvrg " + group
	cpus 	:= (nth_bam_cvrg==1) ? -1 : nth_bam_cvrg;	mem := get_res_mem(mem_bam_cvrg,nth_bam_cvrg);	timeout := get_res_wt(wt_bam_cvrg)

	wait_par( cpus )

	tid := task( out<-in ) {

		sys $shcmd_init

		sys bamCoverage -v -b $filt_bam -o $bigwig -of bigwig -p $nth_bam_cvrg $param_bam_cvrg

		sys $shcmd_finalize
	}

	register_par( tid, cpus )

	add_task_to_graph( in, out, group, "bamCoverage", grp_color_sigtrk )

	return out
}
